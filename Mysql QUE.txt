1. Write a MySQL query to create a simple table countries including columns country_id, country_name and region_id.

CREATE TABLE countries (
    country_id INT PRIMARY KEY,
    country_name VARCHAR(50) NOT NULL,
    region_id INT
);

-------------------------------------------

2. Write a MySQL query to create a simple table countries including columns country_id, country_name and region_id which is already exists.

CREATE TABLE IF NOT EXISTS countries (
    country_id INT PRIMARY KEY,
    country_name VARCHAR(50) NOT NULL,
    region_id INT
);

---------------------------------------------


3. Write a MySQL query to create the structure of a table dup_countries similar to countries.

CREATE TABLE dup_countries LIKE countries;

---------------------------------------------

4. Write a MySQL query to create a duplicate copy of countries table including structure and data by name dup_countries.

CREATE TABLE dup_countries AS SELECT * FROM countries;

---------------------------------------------

5. Write a MySQL query to create a table countries set a constraint NULL.

CREATE TABLE countries (
    country_id INT PRIMARY KEY,
    country_name VARCHAR(50) NULL,
    region_id INT NULL
);

-----------------------------------------------

6. Write a MySQL query to create a table named jobs including columns job_id, job_title, min_salary, max_salary and check whether the max_salary amount exceeding the upper limit 25000.

CREATE TABLE jobs (
    job_id INT PRIMARY KEY,
    job_title VARCHAR(100) NOT NULL,
    min_salary DECIMAL(10,2),
    max_salary DECIMAL(10,2),
    CHECK (max_salary <= 25000)
);

-----------------------------------------------

7. Write a MySQL query to create a table named countries including columns country_id, country_name and region_id and make sure that no countries except Italy, India and China will be entered in the table.

CREATE TABLE countries (
    country_id INT PRIMARY KEY,
    country_name VARCHAR(50) NOT NULL,
    region_id INT,
    CHECK (country_name IN ('Italy', 'India', 'China'))
);

-------------------------------------------------

8. Write a MySQL query to create a table named job_history including columns employee_id, start_date, end_date, job_id and department_id and make sure that the value against column end_date will be entered at the time of insertion to the format like '--/--/----'.

CREATE TABLE job_history (
    employee_id INT PRIMARY KEY,
    start_date DATE NOT NULL,
    end_date VARCHAR(10) NOT NULL CHECK (end_date LIKE '__/__/____'),
    job_id INT,
    department_id INT
);

---------------------------------------------------

9. Write a MySQL query to create a table named countries including columns country_id,country_name and region_id and make sure that no duplicate data against column country_id will be allowed at the time of insertion.

CREATE TABLE countries (
    country_id INT PRIMARY KEY,
    country_name VARCHAR(50) NOT NULL,
    region_id INT
);

------------------------------------------------------

10. Write a MySQL query to create a table named jobs including columns job_id, job_title, min_salary and max_salary, and make sure that, the default value for job_title is blank and min_salary is 8000 and max_salary is NULL will be entered automatically at the time of insertion if no value assigned for the specified columns.

CREATE TABLE jobs (
    job_id INT PRIMARY KEY,
    job_title VARCHAR(100) DEFAULT '',
    min_salary DECIMAL(10,2) DEFAULT 8000,
    max_salary DECIMAL(10,2) DEFAULT NULL
);

---------------------------------------------------------

11. Write a MySQL query to create a table named countries including columns country_id, country_name and region_id and make sure that the country_id column will be a key field which will not contain any duplicate data at the time of insertion.

CREATE TABLE countries (
    country_id INT PRIMARY KEY,
    country_name VARCHAR(50) NOT NULL,
    region_id INT
);

---------------------------------------------------

12. Write a MySQL query to create a table countries including columns country_id, country_name and region_id and make sure that the column country_id will be unique and store an auto incremented value.

CREATE TABLE countries (
    country_id INT PRIMARY KEY AUTO_INCREMENT,
    country_name VARCHAR(50) NOT NULL,
    region_id INT
);

-----------------------------------------------------

13. Write a MySQL query to create a table countries including columns country_id, country_name and region_id and make sure that the combination of columns country_id and region_id will be unique.

CREATE TABLE countries (
    country_id INT,
    country_name VARCHAR(50) NOT NULL,
    region_id INT,
    PRIMARY KEY (country_id, region_id)
);

-------------------------------------------------


14. Write a MySQL query to create a table job_history including columns employee_id, start_date, end_date, job_id and department_id and make sure that, the employee_id column does not contain any duplicate value at the time of insertion and the foreign key column job_id contain only those values which are exists in the jobs table.

Here is the structure of the table jobs;

+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | varchar(10)  | NO   | PRI |         |       |
| JOB_TITLE  | varchar(35)  | NO   |     | NULL    |       |
| MIN_SALARY | decimal(6,0) | YES  |     | NULL    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+


CREATE TABLE job_history (
    employee_id INT PRIMARY KEY,  -- Ensures employee_id is unique (no duplicates)
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    job_id VARCHAR(10) NOT NULL,
    department_id INT,
    FOREIGN KEY (job_id) REFERENCES jobs(JOB_ID)  -- Ensures job_id exists in jobs table
);

------------------------------------------------------------


15. Write a  MySQL query to create a table employees including columns employee_id, first_name, last_name, email, phone_number hire_date, job_id, salary, commission, manager_id and department_id and make sure that, the employee_id column does not contain any duplicate value at the time of insertion and the foreign key columns combined by department_id and manager_id columns contain only those unique combination values, which combinations are exists in the departments table.

Assume the structure of departments table below.

+-----------------+--------------+------+-----+---------+-------+
| Field           | Type         | Null | Key | Default | Extra |
+-----------------+--------------+------+-----+---------+-------+
| DEPARTMENT_ID   | decimal(4,0) | NO   | PRI | 0       |       |
| DEPARTMENT_NAME | varchar(30)  | NO   |     | NULL    |       |
| MANAGER_ID      | decimal(6,0) | NO   | PRI | 0       |       |
| LOCATION_ID     | decimal(4,0) | YES  |     | NULL    |       |
+-----------------+--------------+------+-----+---------+-------+


CREATE TABLE employees (
    employee_id INT PRIMARY KEY,  -- Ensures employee_id is unique (no duplicates)
    first_name VARCHAR(50),
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone_number VARCHAR(20),
    hire_date DATE NOT NULL,
    job_id VARCHAR(10) NOT NULL,
    salary DECIMAL(8,2) NOT NULL,
    commission DECIMAL(5,2),
    manager_id DECIMAL(6,0) NOT NULL,
    department_id DECIMAL(4,0) NOT NULL,
    FOREIGN KEY (department_id, manager_id) REFERENCES departments(DEPARTMENT_ID, MANAGER_ID) -- Ensures only valid combinations exist
);

====================================================================================================================
====================================================================================================================


1. Write a MYSQL statement to rename the table countries to country_new.

RENAME TABLE countries TO country_new;

---------------------------

2. Write a MYSQL statement to add a column region_id to the table locations.

ALTER TABLE locations ADD COLUMN region_id INT;

------------------------------
3. Write a MYSQL statement to add a columns ID as the first column of the table locations.

ALTER TABLE locations ADD COLUMN ID INT FIRST;

---------------------------------

4. Write a MYSQL statement to add a column region_id after state_province to the table locations.

ALTER TABLE locations ADD COLUMN region_id INT AFTER state_province;

-----------------------------------

5. Write a MYSQL statement change the data type of the column country_id to integer in the table locations.

ALTER TABLE locations MODIFY COLUMN country_id INT;

----------------------------------

6. Write a MYSQL statement to drop the column city from the table locations.

ALTER TABLE locations DROP COLUMN city;

--------------------------------
7. Write a MYSQL statement to change the name of the column state_province to state, keeping the data type and size same.

ALTER TABLE locations CHANGE COLUMN state_province state VARCHAR(100);

----------------------------------------

8. Write a MYSQL statement to add a primary key for the columns location_id in the locations table.

ALTER TABLE locations ADD PRIMARY KEY (location_id);


===========================================================================================
===========================================================================================

1. Write a query to display the names (first_name, last_name) using alias name "First Name", "Last Name"

SELECT first_name AS "First Name", last_name AS "Last Name" FROM employees;

------------------------------------------

2. Write a query to get unique department ID from employee table.

SELECT DISTINCT department_id FROM employees;

-------------------------------------------

3. Write a query to get all employee details from the employee table order by first name, descending.

SELECT * FROM employees ORDER BY first_name DESC;

----------------------------------------

4. Write a query to get the names (first_name, last_name), salary, PF of all the employees (PF is calculated as 15% of salary).

SELECT first_name, last_name, salary, (salary * 0.15) AS PF FROM employees;

------------------------------------------

5. Write a query to get the employee ID, names (first_name, last_name), salary in ascending order of salary.

SELECT employee_id, first_name, last_name, salary FROM employees ORDER BY salary ASC;

----------------------------------------------

6. Write a query to get the total salaries payable to employees.

SELECT SUM(salary) AS Total_Salaries FROM employees;

----------------------------------------------
7. Write a query to get the maximum and minimum salary from employees table.

SELECT MAX(salary) AS Max_Salary, MIN(salary) AS Min_Salary FROM employees;

-----------------------------------------------

8. Write a query to get the average salary and number of employees .

SELECT AVG(salary) AS Average_Salary, COUNT(*) AS Number_of_Employees FROM employees;

-----------------------------------------------
9. Write a query to get the number of employees working with the company.

SELECT COUNT(*) AS Total_Employees FROM employees;


===============================================================================================
===============================================================================================


1. Write a query to display the name (first_name, last_name) and salary for all employees whose salary is not in the range $10,000 through $15,000.

SELECT first_name, last_name, salary 
FROM employees 
WHERE salary NOT BETWEEN 10000 AND 15000;

----------------------------------------

2. Write a query to display the name (first_name, last_name) and department ID of all employees in departments 30 or 100 in ascending order.

SELECT first_name, last_name, department_id 
FROM employees 
WHERE department_id IN (30, 100) 
ORDER BY department_id ASC;

----------------------------------------

3. Write a query to display the name (first_name, last_name) and salary for all employees whose salary is not in the range $10,000 through $15,000 and are in department 30 or 100.

SELECT first_name, last_name, salary 
FROM employees 
WHERE salary NOT BETWEEN 10000 AND 15000 
AND department_id IN (30, 100);

-------------------------------------
4. Write a query to display the name (first_name, last_name) and hire date for all employees who were hired in 1987.

SELECT first_name, last_name, hire_date 
FROM employees 
WHERE YEAR(hire_date) = 1987;

--------------------------------------------
5. Write a query to display the first_name of all employees who have both "b" and "c" in their first name.

SELECT first_name 
FROM employees 
WHERE first_name LIKE '%b%' AND first_name LIKE '%c%';

-----------------------------------------
6. Write a query to display the last name, job, and salary for all employees whose job is that of a Programmer or a Shipping Clerk, and whose salary is not equal to $4,500, $10,000, or $15,000.

SELECT last_name, job_id, salary 
FROM employees 
WHERE job_id IN ('Programmer', 'Shipping Clerk') 
AND salary NOT IN (4500, 10000, 15000);

------------------------------------------
7. Write a query to display the last name of employees whose names have exactly 6 characters.

SELECT last_name 
FROM employees 
WHERE LENGTH(last_name) = 6;

----------------------------------------

8. Write a query to display the last name of employees having 'e' as the third character.

SELECT last_name 
FROM employees 
WHERE last_name LIKE '__e%';

-------------------------
9. Write a query to display the jobs/designations available in the employees table.

SELECT DISTINCT job_id 
FROM employees;

----------------------
10. Write a query to display the name (first_name, last_name), salary and PF (15% of salary) of all employees.

SELECT first_name, last_name, salary, (salary * 0.15) AS PF 
FROM employees;
